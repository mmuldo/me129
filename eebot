#!/usr/bin/env python3

import sys
import motor
import move_bot
import time
from dataclasses import dataclass
from typing import Any, Optional, List, Callable

robot = motor.Motor()

def extract_time_flag(args: List[str]) -> Optional[float]:
    '''
    finds "--time [time]" flag in command, removes it from args list,
    and returns the time argument

    Parameters
    ----------
    args : list[str]
        arguments passed to eebot command

    Returns
    ------
    float
        the time argument (i.e. the amount of time to run the command),
        if it exists; returns None if time flag not present.
        note that args now no longer contains '--time' and '[time]'
    '''
    try:
        i = args.index('--time')
        # pop '--time' out of args list
        args.pop(i)
        # pop and return '[time]' value out of args list
        return float(args.pop(i))
    except ValueError:
        # if time flag not present in args list, return None
        return None



@dataclass
class Command:
    '''
    subcommand for eebot command

    Attributes
    ----------
    func : Any -> Any
        function to run
    params : List[Any]
        parameters to pass to function
    help : str
        help menu for subcommand

    Methods
    -------
    run()
        runs subcommand's function with parameters
    '''
    func: Callable[[Any], Any]
    params: List[Any]
    help: str = ''

    def run(self):
        '''run subcommand'''
        self.func(*self.params)

# rename sys.argv contents to intuitive names
command = sys.argv[1]
args = sys.argv[2:]
# get time to run for
t = extract_time_flag(args)

# maps command line subcommand to Command object
command_mapping = {
    'set': Command(
        robot.set,
        [float(arg) for arg in args]
    ),
    'setlinear': Command(
        robot.setlinear,
        [float(arg) for arg in args]
    ),
    'setspin': Command(
        robot.setspin,
        [float(arg) for arg in args]
    ),
    'rotate': Command(
        robot.setspin_direct,
        [float(arg) for arg in args]
    ),
    'line': Command(
        move_bot.straight_and_back,
        []
    ),
    'square': Command(
        move_bot.square,
        []
    ),
    'triangle': Command(
        move_bot.triangle,
        []
    ),
    'setvel': Command(
        robot.setvel,
        [float(arg) for arg in args]
    ),
}

command_mapping[command].run()

# default time to run to 1 second
time.sleep(t if t else 0)
robot.shutdown()
